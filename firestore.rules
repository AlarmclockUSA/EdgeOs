rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is an executive
    function isExecutive() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'executive';
    }

    // Helper function to check if the user is a supervisor
    function isSupervisor() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'supervisor';
    }

    // Helper function to check if the user belongs to the company
    function belongsToCompany(companyName) {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyName == companyName;
    }

    // Companies collection rules
    match /companies/{companyName} {
      // Allow reading basic company info for signup verification
      allow get: if true;
      
      // Allow reading full company data if user belongs to the company
      allow list: if belongsToCompany(companyName);
      
      // Allow executives to update their company
      allow update: if isExecutive() && belongsToCompany(companyName);
      
      // Allow creating new companies (for company setup)
      allow create: if isAuthenticated();
    }
    
    // Users collection rules
    match /users/{userId} {
      allow create: if true;
      allow read: if isAuthenticated() && (request.auth.uid == userId || isExecutive() || isSupervisor());
      allow update: if isAuthenticated() && (
        request.auth.uid == userId || 
        (isExecutive() && belongsToCompany(resource.data.companyName))
      );
      allow list: if isAuthenticated() && (isExecutive() || isSupervisor());
      
      // Allow users to read/write their own worksheets, and executives/supervisors to read
      match /worksheets/{worksheetId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == userId || 
          isExecutive() || 
          isSupervisor()
        );
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
      
      // Allow users to read/write their own bold actions, and executives/supervisors to read
      match /boldActions/{actionId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == userId || 
          isExecutive() || 
          isSupervisor()
        );
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
      
      // Allow users to read/write their own progress data, and executives/supervisors to read
      match /progress/{progressType} {
        allow read: if isAuthenticated() && (
          request.auth.uid == userId || 
          isExecutive() || 
          isSupervisor()
        );
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
    }
    
    // Invites collection rules
    match /invites/{inviteId} {
      allow read: if true; // Allow reading invite data for verification
      allow create, delete: if isExecutive(); // Only executives can create and delete invites
    }

    // Trainings collection rules (for mapping IDs to titles)
    match /trainings/{trainingId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isExecutive() || isSupervisor());
    }

    // Worksheet rules - allow users to create and manage their own worksheets
    match /worksheets/{worksheetId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isExecutive() || 
        isSupervisor()
      );
    }

    match /userProgress/{progressId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isExecutive() ||
        isSupervisor()
      );
    }
  }
}

